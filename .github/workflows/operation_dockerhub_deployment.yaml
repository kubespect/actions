# ECR 레포지토리에 이미지 빌드 및 배포
name: "Operation : Build & Deploy Image to ECR"

permissions:
  id-token: write # Configure AWS Credentials에서 ID Token 쓰기 권한 사용
  contents: read  # Checkout Code에서 코드 읽기 권한 사용
  packages: read  # Retreive Artifacts에서 Artifact 읽기 권한 사용

on:
  workflow_call:          # workflow_call 호출
    inputs:
      REPOSITORY:             # 모듈 이름
        required: true
        type: string
      NEW_TAG:            # 추가할 태그, 커밋의 SHA
        required: true
        type: string
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true

jobs:
  deploy-image:
    runs-on: ubuntu-latest # Github Hosted Ubuntu Runner에서 실행
    steps:
      # 추가할 이미지 태그 출력
      - run: echo "🔖 IMAGE TAG ${{ inputs.NEW_TAG }}"

      # 코드 체크아웃
      - name: Checkout Code
        uses: actions/checkout@v2

      # Docker Buildx 설정
      - id: set-buildx
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Dockerhub 로그인
      - id: login-docker
        name: Login to Dockerhub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build & Deploy image to Dockerhub
      - id: build-push-image
        name: Build and Push Docker Image to ECR
        env:
          REPOSITORY: ${{ inputs.REPOSITORY }}                      # 모듈 이름
          USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}                  # ECR 계정 이름
          NEW_TAG: ${{ inputs.NEW_TAG }}                    # 추가할 태그, 커밋의 태그
        # 이미지 amd64 대상으로 빌드 및 배포
        run: |
          docker buildx build --platform linux/amd64 -t $USERNAME/$REPOSITORY:$NEW_TAG --push .
          echo "🐳 DOCKER IMAGE BUILT FOR REPOSITORY ${{ inputs.REPOSITORY }} AS $USERNAME/$REPOSITORY:$NEW_TAG"
          echo "🚀 IMAGE $USERNAME/$REPOSITORY:$NEW_TAG PUSHED"